package com.ytec.mdm.unit;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStreamReader;import java.util.HashMap;import java.util.List;import java.util.Map;import org.dom4j.Document;import org.dom4j.Element;import org.dom4j.io.SAXReader;import com.ytec.mdm.base.dao.JPABaseDAO;import com.ytec.mdm.base.util.SpringContextUtils;import com.ytec.mdm.base.util.StringUtil;public class TestSocketTransaction {	private static byte SP = 32;	public static void main(String[] args) throws Exception {		String requestFile = null;		String serverIp = null;		String serverPort = null;		if (args.length == 3) {			serverIp = args[0];			serverPort = args[1];			requestFile = args[2];		} else if (args.length == 0) {			// requestFile="D:/公司SVN/产品/ytececif-doc/01-过程库/06-测试/02-集成测试/02-测试用例/交易服务/测试请求报文/复杂业务流程_01.xml";			// requestFile="D:/公司SVN/产品/ytececif-doc/01-过程库/06-测试/02-集成测试/02-测试用例/交易服务/测试请求报文/联机批量结果查询_01.xml";			// requestFile="D:/公司SVN/产品/ytececif-doc/01-过程库/06-测试/02-集成测试/02-测试用例/交易服务/测试请求报文/修改客户信息类交易_01.xml";			// requestFile="D:/公司SVN/产品/ytececif-doc/01-过程库/06-测试/02-集成测试/02-测试用例/交易服务/测试请求报文/客户合并_01.xml";			// requestFile="D:/公司SVN/产品/ytececif-doc/01-过程库/06-测试/01-单元测试/交易/batch.xml";			//requestFile = "D:/公司SVN/产品/ytececif-doc/01-过程库/06-测试/02-集成测试/02-测试用例/交易服务/测试请求报文/个人开客户户交易_03.xml";			 requestFile="D:/公司SVN/产品/ytececif-doc/01-过程库/06-测试/02-集成测试/02-测试用例/交易服务/测试请求报文/个人开客户户交易_01.xml";			// requestFile="D:/公司SVN/产品/ytececif-doc/01-过程库/06-测试/02-集成测试/02-测试用例/交易服务/测试请求报文/外部报文.xml";			serverIp = "192.168.1.97";			serverPort = "9501";		} else {			System.out.println("Usage :服务器IP 服务器端口    请求报文");			return;		}		if (StringUtil.isEmpty(serverIp) || StringUtil.isEmpty(serverPort)				|| StringUtil.isEmpty(requestFile)) {			System.out.println("Usage :服务器IP 服务器端口    请求报文");			return;		}		// HttpClient client = new HttpClient();		Map arg = new HashMap();		arg.put("ip", serverIp);		arg.put("port", serverPort);		arg.put("url", "ytec-mdm-ecifTrans/EcifServer");		arg.put("charset", "UTF-8");		arg.put("timeout", "60000");		arg.put("selecttimeout", "3000");		arg.put("keyStorePath", "D:/ssl/keystore");		arg.put("keyPassWord", "123456");		arg.put("trustStorePath", "D:/ssl/truststore");		arg.put("trustPassWord", "123456");		// client.init(arg);		File file = new File(requestFile);		if (!file.exists()) {			System.out.println("文件不存在");			return;		}		StringBuffer sb = new StringBuffer();		 BufferedReader reader = null;	        try {	        	String fileCharSet="GBK";	            reader = new BufferedReader(new InputStreamReader(new FileInputStream(file),fileCharSet));	            String tempString = null;	            while ((tempString = reader.readLine()) != null) {	                sb.append(tempString);	            }	            reader.close();	        } catch (IOException e) {	            e.printStackTrace();	        } finally {	            if (reader != null) {	                try {	                    reader.close();	                } catch (IOException e1) {	                }	            }	        }		/*		 * BufferedReader reader = null; try { reader = new BufferedReader(new		 * FileReader(file)); String tempString = null; while ((tempString =		 * reader.readLine()) != null) { sb.append(tempString); }		 * reader.close(); } catch (IOException e) { e.printStackTrace(); }		 * finally { if (reader != null) { try { reader.close(); } catch		 * (IOException e1) { } } }		 */		// int m=2;		//String msg = "QECIF2_006|20,11000014217|32,1|20,1|10";				//		Document synchroCfg = null;//		SAXReader saxReader = new SAXReader();//		synchroCfg = saxReader.read(file);//		Element root=(Element)synchroCfg.selectSingleNode("//RequestBody");//		String txCode="ECIFOPENPER3";//		JPABaseDAO baseDAO = (JPABaseDAO) SpringContextUtils.getBean("baseDAO");//		List<Object[]> list=baseDAO.findByNativeSQLWithIndexParam("select t1.attr_code,t1.Data_len,t1.attr_seq from tx_msg_node_attr t1,tx_msg_node t2,tx_msg t3,tx_def t4 where t4.tx_code=?"+//				" and t4.tx_id=t3.tx_id and t3.msg_tp='1' and t3.msg_id=t2.msg_id and t2.node_id=t1.node_id and t1.attr_seq<>0 order by t1.attr_seq", txCode);//		for(Object[] o:list){//			sb.append(fiexdC(root.elementTextTrim(o[0].toString()), Integer.valueOf(o[1].toString())));//		}//		String str = sb.toString();//		arg.put("txCode", txCode);////		System.out.println("[" + str + "]");								// while(m-->0){		// System.out.println("#######################"+m);		// String body = str.substring(str.indexOf("<RequestBody>"),		// str.indexOf("</RequestBody>")+14);		// String checkSum=RequestCheckSum.CheckReponseSum(body);		// str=str.replace("<HMac/>", "<HMac>"+checkSum+"</HMac>");		// HttpClient client = new HttpClient();		SocketClient client = new SocketClient();		client.init(arg);		client.sendMsg(sb.toString());		// Thread r=new Thread(new rr(client,str));		// r.start();		// }	}	public static String fiexdC(String text, int leng) {		// TODO Auto-generated method stub		byte[] b = new byte[leng];		int length = 0;		if (text != null) {			byte[] src = text.getBytes();			length = src.length;			if (length > leng) {				// text=text.substring(0, (int)leng);				length = 0;			} else {				System.arraycopy(src, 0, b, 0, length);			}			for (int i = length; i < leng; i++) {				b[i] = SP;			}		} else {			for (int i = length; i < leng; i++) {				b[i] = SP;			}		}		return new String(b);	}}// class rr implements Runnable{// HttpClient client;// String str;// public rr(HttpClient client,String str){// this.client=client;// this.str=str;// }// public void run() {// client.sendMsg(str);// }// }